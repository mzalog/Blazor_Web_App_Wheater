@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>
<p>This component demonstrates showing data.</p>

<p>Warm Days: @warmDays</p>

<p>
    <input class="form-control" placeholder="Filter by summary..." @oninput="Input" />
</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="WarmDaysFilter">Filter Warm Days</button>
    <button class="btn btn-secondary" @onclick="RestoreForecasts">Restore Forecasts</button>
}

@code {
    private WeatherForecast[]? originalForecasts;
    private WeatherForecast[]? forecasts;
    private int warmDays;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        originalForecasts = forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();

        warmDays = forecasts.Count(f => f.TemperatureC > 15);
    }

    void WarmDaysFilter()
    {
        forecasts = forecasts.Where(f => f.TemperatureC >= 15).ToArray();
        warmDays = forecasts.Length;
    }

    void RestoreForecasts()
    {
        forecasts = originalForecasts;
        warmDays = originalForecasts.Count(f => f.TemperatureC > 15);
    }

    void Input(ChangeEventArgs arg)
    {
        var filterText = arg.Value.ToString();
        if (string.IsNullOrEmpty(filterText))
        {
            RestoreForecasts();
        }
        else
        {
            forecasts = originalForecasts.Where(f => f.Summary.Contains(filterText, StringComparison.OrdinalIgnoreCase)).ToArray();
        }
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
